/**
 *	Annihilation mode - PvE Co-op GameMode
 *  Author : lethan
 *  Contact : lethanov@gmail.com
 */

#Extends "Modes/ShootMania/ModeBase.Script.txt"

#Const	CompatibleMapTypes	"MeleeArena"
#Const	Version				"2015-03-14"
#Const	ScriptName			"Annihilation.Script.txt"

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Message.Script.txt" as Message
#Include "Libs/Nadeo/Interface.Script.txt" as Interface
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/SpawnScreen.Script.txt" as SpawnScreen

// ---------------------------------- //
// Settings
// ---------------------------------- //
#Setting S_Difficulty	1	as _("Difficulty\n 0 = Training, 1 = Easy, 2 = Medium, 3 = Hard, 4 = Hardcore")

#Const Description _("TYPE: Free for all\nOBJECTIVE: Hit your opponents to score points. The first player to reach the points limit or the player with the highest score at the end of the time limit wins the map.")

// ---------------------------------- //
// Globales variables
// ---------------------------------- //
declare CUILayer CustomSounds;
declare CUILayer CustomSoundsKillStreak;
declare CUILayer MatchInfo;

declare Integer LastHit;
declare Integer KillStreak;

declare Integer Score;
declare Text GamePhase;
declare CSmPlayer[] PlayersQueue;
declare CSmPlayer[] PlayersInGame;

declare Boolean BotsCanShoot;
declare Boolean BotsCanMove;
declare Boolean BotsHaveRandomWeapons;
declare Boolean AmmoRegen;
declare Boolean Lifesteal;
declare Integer TimeLimit;
declare Integer NewRoundTimeBonus;
declare Boolean Respawn;

// ---------------------------------- //
// Extend
// ---------------------------------- //
/*
***LogVersion***
***
MB_LogVersion(ScriptName, Version);
MB_LogVersion(SM::GetScriptName(), SM::GetScriptVersion());
MB_LogVersion(Score::GetScriptName(), Score::GetScriptVersion());
MB_LogVersion(Message::GetScriptName(), Message::GetScriptVersion());
MB_LogVersion(Interface::GetScriptName(), Interface::GetScriptVersion());
MB_LogVersion(SpawnScreen::GetScriptName(), SpawnScreen::GetScriptVersion());
***
*/
// ---------------------------------- //
// Set rules
// ---------------------------------- //
***Rules***
***
declare ModeName = "Annihilation";
declare ModeRules = TextLib::Compose(_("Eliminate all bots in the map before the time is running out !\nGreen bots : Rocket\nRed bots : Nucleus\nBlue bots : Laser\nYellow bots : Arrow"), "$"^SpawnScreen::GetModeColor());
SpawnScreen::ResetRulesSection();
SpawnScreen::AddSubsection(_("Annihilation - PvE Co-Op Gamemode"), ModeRules, 20.);
SpawnScreen::CreatePrettyRules(ModeName);
ModeStatusMessage = _("TYPE: PvE Co-Op\nOBJECTIVE: Eliminate all bots in the map before the time is running out !\nINFOS\nGreen bots : Rocket\nRed bots : Nucleus\nBlue bots : Laser\nYellow bots : Arrow");
***

// ---------------------------------- //
// Server start
// ---------------------------------- //
***StartServer***
***
// ---------------------------------- //
// Set mode options
UseClans = False;

// ---------------------------------- //
// Create the rules
---Rules---

// ---------------------------------- //
// Initialize UI
SpawnScreen::CreateScores("Score.RoundPoints");
SpawnScreen::CreateMapInfo();
//Interface::CreateRank();

// ---------------------------------- //
// Create the scores table
ST2::SetStyle("LibST_SMBaseSolo");
ST2::SetStyle("LibST_SMBasePoints");
//MB_SetScoresTableStyleFromXml(S_ScoresTableStylePath);
ST2::Build("SM");
***

***InitMap***
***
CustomSounds = UIManager.UILayerCreate();
UIManager.UIAll.UILayers.add(CustomSounds);
CustomSounds.ManialinkPage = """
""";

CustomSoundsKillStreak = UIManager.UILayerCreate();
UIManager.UIAll.UILayers.add(CustomSoundsKillStreak);
CustomSoundsKillStreak.ManialinkPage = """
""";

MatchInfo = UIManager.UILayerCreate();
UIManager.UIAll.UILayers.add(MatchInfo);
MatchInfo.ManialinkPage = """
""";

***

// ---------------------------------- //
// Map start
// ---------------------------------- //
***StartMap***
***
LastHit = Now;
KillStreak = 0;
GamePhase = "checking";
SM::SetupDefaultVisibility();

// ---------------------------------- //
// Init bases
foreach (Base in MapBases) {
	Base.Clan = 1;
	Base.IsActive = True;
}

// ---------------------------------- //
// New map sound
UIManager.UIAll.SendNotice("", CUIConfig::ENoticeLevel::MatchInfo, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::PhaseChange, 0);
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
Score = 0;
***

// ---------------------------------- //
// Play loop
// ---------------------------------- //
***PlayLoop***
***
if(GamePhase == "checking"){
	SetParametersByDifficulty();
	ShowMatchInfo();
	if(Players.count == 0){
		sleep(1000);
		declare Msg = TextLib::Compose(_("$aafNo Players"));
		Message::SendBigMessage(Msg, 1000, 3, CUIConfig::EUISound::Silence, 0);
	} else {
		PlayersQueue.clear();
		PlayersInGame.clear();
		foreach(Player in Players){
			if(!PlayersQueue.exists(Player)){
				PlayersQueue.add(Player);
			}
		}
		GamePhase = "newRound";
	}	
}
if(GamePhase == "newRound"){
	StartTime = Now;
	if (TimeLimit > 0) EndTime = StartTime + (TimeLimit * 1000);
	else EndTime = -1;	

	PlaySound("prepare", 0);
	
	CreateBots();
	Score = 0;
	
	foreach(Player in Players){
		if(PlayersQueue.exists(Player)){
			if(PlayersInGame.count < 5){
				PlayersInGame.add(Player);
				Message::SendStatusMessage(Player, TextLib::Compose(_("Get ready, you are gonna playing this round !")), 3000, 0);
				declare UI <=> UIManager.GetUI(Player);
				UI.SendNotice(TextLib::Compose(_("%1 will play this match."), Player.Name),
                CUIConfig::ENoticeLevel::Default, Null, CUIConfig::EAvatarVariant::Default,
                CUIConfig::EUISound::Silence, 0);
				declare removed = PlayersQueue.remove(Player);
			} else {
				break;
			}
		}
	}
	sleep(2000);
	
	declare Msg = TextLib::Compose(_("$aafNew round"));
	Message::SendBigMessage(Msg, 2000, 3, CUIConfig::EUISound::StartRound, 0);
	StartTime = Now;
	if (TimeLimit > 0) EndTime = StartTime + (TimeLimit * 1000);
	else EndTime = -1;	
	GamePhase = "play";
} else if(GamePhase == "play"){
	foreach (Event, PendingEvents) {
		// ---------------------------------- //
		// On armor empty
		if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) {
			if(Event.Victim.IsFakePlayer){
				if(Now < LastHit + 500){
					KillStreak += 1;
					LastHit = Now;
					DoKillStreakAnnounce();
					log(KillStreak);
				} else {
					KillStreak = 0;
					LastHit = Now;
				}
				if(AmmoRegen){			
					SetPlayerAmmo(Event.Shooter, CSmMode::EWeapon::Laser, 1);
				}
				if(Lifesteal){
					declare lifeStealChance = MathLib::Rand(0,1);
					if(lifeStealChance == 1){
						Event.Shooter.Armor += 100;
						declare UI <=> UIManager.GetUI(Event.Shooter);
						UI.SendNotice(TextLib::Compose(_("$f6fLifesteal !")), CUIConfig::ENoticeLevel::Default, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::Silence, 0);
					}
				}
				Score += 1;
				declare Msg = "";
				declare Gap = BotPlayers.count - Score;
				declare Variant = 3 - Gap;
				if (Gap > 0 && Gap <= 3) {
					if (Gap > 1) {
						Msg = TextLib::Compose(_("%1 bots left !"), TextLib::ToText(Gap));
                    } else {
						Msg = TextLib::Compose(_("Eliminate the last one!"));
					}
					Message::SendBigMessage(Msg, 2000, 3, CUIConfig::EUISound::TieBreakPoint, Variant);
				}
	            else if (Gap <= 0) {
					Msg = TextLib::Compose(_("$aafANNIHILATION !"));
					Message::SendBigMessage(Msg, 2000, 3, CUIConfig::EUISound::VictoryPoint, 0);
					EndTime = 0;
					GamePhase = "roundEnd";
				} else {
					Message::SendBigMessage(TextLib::Compose("$aaf%1 : $dd0%2 / %3", _("Eliminations"), TextLib::ToText(Score), TextLib::ToText(BotPlayers.count)), 2000, 3, CUIConfig::EUISound::ScoreProgress, Variant);
				}
			} else{
				if(!Respawn){
					declare removed = PlayersInGame.remove(Event.Victim);
				}
				XmlRpc::OnArmorEmpty(Event);
				PassOn(Event);
			}
		} 
		// ---------------------------------- //
		// On hit
		else if (Event.Type == CSmModeEvent::EType::OnHit) {
			if (Event.Victim == Null || Event.Shooter == Event.Victim) {
				Discard(Event);
			} else {
				if(Event.Shooter.IsFakePlayer && ! Event.Victim.IsFakePlayer){
					Event.Damage = 100;
					XmlRpc::OnHit(Event);
					PassOn(Event);
				} else if(!Event.Shooter.IsFakePlayer && Event.Victim.IsFakePlayer){
					declare FakeDistance = SendHitDistanceMessage(Event);
					declare Distance = 0;
                    if(MathLib::CeilingInteger(FakeDistance)/4 < 5) {
						Distance = 5;
					} else if(MathLib::CeilingInteger(FakeDistance)/4 > 15) {
						Distance = 15;
					} else {
						Distance = MathLib::CeilingInteger(FakeDistance)/4;
					}
					Distance /= PlayersInGame.count;

					EndTime += (Distance * 1000);
					Message::SendStatusMessage(TextLib::Compose(_("+%1 seconds !"), TextLib::ToText(Distance)), 3000, 0);
					Event.Damage = 100;
					XmlRpc::OnHit(Event);
					PassOn(Event);
				} else {
					Discard(Event);
				}
			}
		} 
		// ---------------------------------- //
		// On player request respawn
		else if (PlayersInGame.exists(Event.Shooter) && Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
			Score::RemovePoints(Event.Player, 1);
			XmlRpc::OnPlayerRequestRespawn(Event);
			PassOn(Event);
		} else {
			PassOn(Event);
		}
	}	
	
	if((EndTime - Now) == 30000)
	{
		PlaySound("30sec", -1);
	}
	if((EndTime - Now) == 10000)
	{
		PlaySound("cd", 10);
	}
	if((EndTime - Now) == 9000)
	{
		PlaySound("cd", 9);
	}
	if((EndTime - Now) == 8000)
	{
		PlaySound("cd", 8);
	}
	if((EndTime - Now) == 7000)
	{
		PlaySound("cd", 7);
	}
	if((EndTime - Now) == 6000)
	{
		PlaySound("cd", 6);
	}
	if((EndTime - Now) == 5000)
	{
		PlaySound("cd", 5);
	}
	if((EndTime - Now) == 4000)
	{
		PlaySound("cd", 4);
	}
	if((EndTime - Now) == 3000)
	{
		PlaySound("cd", 3);
	}
	if((EndTime - Now) == 2000)
	{
		PlaySound("cd", 2);
	}
	if((EndTime - Now) == 1000)
	{
		PlaySound("cd", 1);
	}
	
	// ---------------------------------- //
	// Spawn players
	foreach (Player in Players) {
		if (PlayersInGame.exists(Player) && !PlayersQueue.exists(Player) && Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && !Player.RequestsSpectate) {
			AnniSpawnPlayer(Player);
		}
	}
	if(EndTime < Now || Players.count == 0 || PlayersInGame.count == 0) GamePhase = "roundEnd";

} else if (GamePhase == "roundEnd") {
	sleep(2000);
	UnspawnPlayers();
	sleep(1000);
	DestroyAllBotPlayers();
	EndTime = -1;
	declare Msg = "";
	if(Score == BotPlayers.count) {
		Msg = TextLib::Compose(_("$5f5Excellent !"));
		PlaySound("excellent", 0);
		Message::SendBigMessage(Msg, 2000, 3, CUIConfig::EUISound::EndRound, 0);
	} else {
		Msg = TextLib::Compose(_("$f55Game Over !"));
		Message::SendBigMessage(Msg, 2000, 3, CUIConfig::EUISound::EndRound, 0);
	}
	PlayersInGame.clear();
	sleep(5000);
	GamePhase = "checking";
}
Message::Loop();
***

// ---------------------------------- //
// Map end
// ---------------------------------- //

// ---------------------------------- //
// Server end
// ---------------------------------- //
***EndServer***
***
Interface::DestroyRank();
SpawnScreen::DestroyRules();
SpawnScreen::DestroyScores();
SpawnScreen::DestroyMapInfo();
***

// ---------------------------------- //
// Functions
// ---------------------------------- //

/* ------------------------------------- */
/** Spawn a player
 *
 * @param	_Player		The player to spawn
 */
Void AnniSpawnPlayer(CSmPlayer _Player) {
	_Player.ArmorMax = 400;
	_Player.AmmoGain = 1.8;
	SetPlayerWeapon(_Player, CSmMode::EWeapon::Laser, False);
	SpawnPlayer(_Player, 0, 400, MapLandmarks_PlayerSpawn[0].PlayerSpawn, Now);
	_Player.ForceColor = <0., 0., 0.1>;
}

Void PlaySound(Text soundName, Integer variant){
	CustomSounds.ManialinkPage = """""";
	if(soundName == "cd"){
		CustomSounds.ManialinkPage = """<manialink version="2">
		<audio looping="0" hidden="1" play="1" data="https://dl.dropboxusercontent.com/u/42719494/Maniaplanet/cd{{{variant}}}.ogg"/>
		</manialink>""";
	}
	if(soundName == "lastsecondsave"){
		CustomSounds.ManialinkPage = """<manialink version="2">
		<audio looping="0" hidden="1" play="1" data="https://dl.dropboxusercontent.com/u/42719494/Maniaplanet/capture.ogg"/>
		</manialink>""";
	}
	if(soundName == "30sec"){
		CustomSounds.ManialinkPage = """<manialink version="2">
		<audio looping="0" hidden="1" play="1" data="https://dl.dropboxusercontent.com/u/42719494/Maniaplanet/30_seconds_remain.ogg"/>
		</manialink>""";
	}
	if(soundName == "excellent"){
		CustomSounds.ManialinkPage = """<manialink version="2">
		<audio looping="0" hidden="1" play="1" data="https://dl.dropboxusercontent.com/u/42719494/Maniaplanet/excellent.ogg"/>
		</manialink>""";
	}
	if(soundName == "prepare"){
		CustomSounds.ManialinkPage = """<manialink version="2">
		<audio looping="0" hidden="1" play="1" data="https://dl.dropboxusercontent.com/u/42719494/Maniaplanet/Play.ogg"/>
		</manialink>""";
	}
	if(soundName == "lost"){
		CustomSounds.ManialinkPage = """<manialink version="2">
		<audio looping="0" hidden="1" play="1" data="https://dl.dropboxusercontent.com/u/42719494/Maniaplanet/lostmatch.ogg"/>        </manialink>""";
	}
}

Void CreateBots(){
	//Bots creation
	for(da,1,20) {
		declare Spawn <=> MapLandmarks_BotPath[MathLib::Rand(0, MapLandmarks_BotPath.count-1)];
		
		declare newBot = CreateBotPlayer(NullId, 0);

		newBot.ArmorMax = 100;
		if(BotsCanShoot){
			newBot.Driver.AttackFilter = CSmPlayerDriver::ESmAttackFilter::OppositePlayers;
		} else {
			newBot.Driver.AttackFilter = CSmPlayerDriver::ESmAttackFilter::Nobody;
		}
		if(BotsCanMove){
			newBot.Driver.Behaviour = CSmPlayerDriver::ESmDriverBehaviour::Saunter;
			newBot.Driver.Saunter_AnchorPoint = Spawn.Position;
			newBot.Driver.Saunter_Radius = 50.;
		} else {
			newBot.Driver.Behaviour = CSmPlayerDriver::ESmDriverBehaviour::Turret;
		}
		declare weapons = ["Rocket", "Laser", "Nucleus", "Arrow"];
		declare weapon = "Rocket";
		if(BotsHaveRandomWeapons) {
			weapon = weapons[MathLib::Rand(0,3)];
		}
		if(weapon == "Rocket"){
			SetPlayerWeapon(newBot, CSmMode::EWeapon::Rocket, False);
			newBot.ForceColor = <0.0, 1.0, 0.0>; 
		} else if(weapon == "Laser"){
			SetPlayerWeapon(newBot, CSmMode::EWeapon::Laser, False);
			newBot.ForceColor = <0.0, 0.5, 0.5>;
		} else if(weapon == "Nucleus"){
			SetPlayerWeapon(newBot, CSmMode::EWeapon::Nucleus, False);
			newBot.ForceColor = <1.0, 0.0, 0.0>;
		} else if(weapon == "Arrow"){
			SetPlayerWeapon(newBot, CSmMode::EWeapon::Arrow, False);
			newBot.ForceColor = <0.5, 0.5, 0.0>;
		}
		newBot.Driver.AggroRadius = 50.;
		newBot.Driver.DisengageDistance = 30.;
		newBot.Driver.Accuracy = 0.8;
		newBot.Driver.Fov = 360.0;
		SpawnBotPlayer(newBot, 0, 100, Spawn.BotPath, Now);
	}
}

Void UnspawnPlayers(){
	foreach (Player in Players) {
		if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
			UnspawnPlayer(Player);
		}
	}
}

Real SendHitDistanceMessage(CSmModeEvent _Event) {
        if (_Event.Type != CSmModeEvent::EType::OnHit) return -1.;                              // Wrong event type
        if (_Event.Shooter == Null || _Event.Victim == Null || _Event.Shooter == _Event.Victim) return -1.;     // Invalid players    
        // Get distance
        declare Distance = MathLib::Distance(_Event.Shooter.Position, _Event.Victim.Position);
        Distance = MathLib::NearestInteger(Distance * 10) / 10.0;
       
        // Save longest hit
        /*
        if (Distance > G_LongestHitDist) {
                G_LongestHitDist = Distance;
                G_LongestHitName = _Event.Shooter.Name;
                SetFooterStats(Null);
        }
        */
        declare UI <=> UIManager.GetUI(_Event.Shooter);
        if (UI == Null) return -1.;
       
        // Send message
        UI.SendNotice(TextLib::Compose(_("%1m hit!"), TextLib::ToText(Distance)),
                CUIConfig::ENoticeLevel::Default, Null, CUIConfig::EAvatarVariant::Default,
                CUIConfig::EUISound::Silence, 0);
        return Distance;
}

Void SetParametersByDifficulty() {
	if(S_Difficulty == 0) {
		BotsCanShoot = False;
		BotsCanMove = False;
		BotsHaveRandomWeapons = False;
		Lifesteal = False;
		TimeLimit = 120;
		AmmoRegen = True;
		NewRoundTimeBonus = 45;
		Respawn = True;
	} else if(S_Difficulty == 1) {
		BotsCanShoot = True;
		BotsCanMove = True;
		BotsHaveRandomWeapons = False;
		Lifesteal = True;
		TimeLimit = 60;
		AmmoRegen = True;
		NewRoundTimeBonus = 45;
		Respawn = True;
	} else if(S_Difficulty == 2) {
		BotsCanShoot = True;
		BotsCanMove = True;
		BotsHaveRandomWeapons = True;
		Lifesteal = True;
		TimeLimit = 60;
		AmmoRegen = True;
		NewRoundTimeBonus = 45;
		Respawn = True;
	} else if(S_Difficulty == 3) {
		BotsCanShoot = True;
		BotsCanMove = True;
		BotsHaveRandomWeapons = True;
		Lifesteal = True;
		TimeLimit = 45;
		AmmoRegen = False;
		NewRoundTimeBonus = 30;
		Respawn = False;
	} else if(S_Difficulty == 4) {
		BotsCanShoot = True;
		BotsCanMove = True;
		BotsHaveRandomWeapons = True;
		Lifesteal = False;
		TimeLimit = 30;
		AmmoRegen = False;
		NewRoundTimeBonus = 20;
		Respawn = False;
	}
}

Void DoKillStreakAnnounce(){
	CustomSoundsKillStreak.ManialinkPage = """""";
	if(KillStreak == 1){
		CustomSoundsKillStreak.ManialinkPage = """<manialink version="2">
	<audio looping="0" hidden="1" play="1" data="https://dl.dropboxusercontent.com/u/42719494/Maniaplanet/Double_Kill.ogg"/>        </manialink>""";
		foreach(Player in Players){
			declare UI <=> UIManager.GetUI(Player);
       		UI.SendNotice(TextLib::Compose(_("$f00Double Kill!")), CUIConfig::ENoticeLevel::Default, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::Silence, 0);
		}
	} else if(KillStreak == 2){
		CustomSoundsKillStreak.ManialinkPage = """<manialink version="2">
	<audio looping="0" hidden="1" play="1" data="https://dl.dropboxusercontent.com/u/42719494/Maniaplanet/MultiKill.ogg"/>        </manialink>""";
		foreach(Player in Players){
			declare UI <=> UIManager.GetUI(Player);
       		UI.SendNotice(TextLib::Compose(_("$f00Multi Kill!")), CUIConfig::ENoticeLevel::Default, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::Silence, 0);
		}
	} else if(KillStreak == 3){
		CustomSoundsKillStreak.ManialinkPage = """<manialink version="2">
	<audio looping="0" hidden="1" play="1" data="https://dl.dropboxusercontent.com/u/42719494/Maniaplanet/MegaKill.ogg"/>        </manialink>""";
		foreach(Player in Players){
			declare UI <=> UIManager.GetUI(Player);
       		UI.SendNotice(TextLib::Compose(_("$f00Mega Kill!")), CUIConfig::ENoticeLevel::Default, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::Silence, 0);
		}
	} else if(KillStreak == 4){
		CustomSoundsKillStreak.ManialinkPage = """<manialink version="2">
	<audio looping="0" hidden="1" play="1" data="https://dl.dropboxusercontent.com/u/42719494/Maniaplanet/UltraKill.ogg"/>        </manialink>""";
		foreach(Player in Players){
			declare UI <=> UIManager.GetUI(Player);
       		UI.SendNotice(TextLib::Compose(_("$f00Ultra Kill!")), CUIConfig::ENoticeLevel::Default, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::Silence, 0);
		}
	} else if(KillStreak > 5){
		CustomSoundsKillStreak.ManialinkPage = """<manialink version="2">
	<audio looping="0" hidden="1" play="1" data="https://dl.dropboxusercontent.com/u/42719494/Maniaplanet/MonsterKill_F.ogg"/>        </manialink>""";
		foreach(Player in Players){
			declare UI <=> UIManager.GetUI(Player);
       		UI.SendNotice(TextLib::Compose(_("$f00Monster Kill!")), CUIConfig::ENoticeLevel::Default, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::Silence, 0);
		}
	}
}

Void ShowMatchInfo(){
	declare difficulty = "$afaTraining";
	if(S_Difficulty == 1){
		difficulty = "0f0Easy";
	} else if(S_Difficulty == 2){
		difficulty = "$aa0Medium";
	} else if(S_Difficulty == 3){
		difficulty = "$f00Hard";
	} else if(S_Difficulty == 4){
		difficulty = "$900Hardcore";
	}
	
	declare LifestealInfo = "$afaYes";
	if(!Lifesteal){
		LifestealInfo = "$f00No";
	}
	
	declare AmmoRegenInfo = "$afaYes";
	if(!AmmoRegen){
		AmmoRegenInfo = "$f00No";
	}
	
	declare RespawnInfo = "$afaYes";
	if(!Respawn){
		RespawnInfo = "$f00No";
	}
	
	/*MatchInfo.ManialinkPage = """
		<frame posn="158 -58 0">
			<label posn="0 0 1" halign="right" style="TextButtonNav" text="{{{_("$sRound")}}} : 1/3" />
		</frame>
	""";*/
	MatchInfo.ManialinkPage = """
		<frame posn="158 -62 0">
			<label posn="0 0 1" halign="right" style="TextButtonNav" text="{{{_("$sDifficulty")}}} : {{{ difficulty }}}" />
		</frame>
	""";
	MatchInfo.ManialinkPage ^= """
		<frame posn="158 -66 0">
			<label posn="0 0 1" halign="right" style="TextButtonNav" text="{{{_("$sTime Limit")}}} : {{{ TimeLimit }}}" />
		</frame>
		""";
	MatchInfo.ManialinkPage ^= """
		<frame posn="158 -70 0">
			<label posn="0 0 1" halign="right" style="TextButtonNav" text="{{{_("$sRespawn")}}} : {{{ RespawnInfo }}}" />
		</frame>
		""";
	MatchInfo.ManialinkPage ^= """
		<frame posn="158 -74 0">
			<label posn="0 0 1" halign="right" style="TextButtonNav" text="{{{_("$sAdditionnal Time Per Round")}}} : {{{ NewRoundTimeBonus }}}" />
		</frame>
		""";
	MatchInfo.ManialinkPage ^= """
		<frame posn="158 -78 0">
			<label posn="0 0 1" halign="right" style="TextButtonNav" text="{{{_("$sLifesteal")}}} : {{{ LifestealInfo }}}" />
		</frame>
		""";
	MatchInfo.ManialinkPage ^= """
		<frame posn="158 -82 0">
			<label posn="0 0 1" halign="right" style="TextButtonNav" text="{{{_("$sAmmo Regen on Elimination")}}} : {{{ AmmoRegenInfo }}}" />
		</frame>
		""";
}